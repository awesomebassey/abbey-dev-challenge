generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  first_name    String?
  last_name     String?
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String
  phone         String?
  city          String?
  state         String?
  address       String?
  bgImage       String?
  accounts      Account[]
  friends       UserFriend[] @relation("UserFriendsUser")
  friendOf      UserFriend[] @relation("UserFriendsFriend")
  followers     UserFollower[] @relation("UserFollowersUser")
  followedBy    UserFollower[] @relation("UserFollowersFollower")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model UserFriend {
  user      User @relation("UserFriendsUser", fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  friend    User @relation("UserFriendsFriend", fields: [friend_id], references: [id], onDelete: Cascade)
  friend_id String

  @@id([user_id, friend_id])
  @@unique([user_id, friend_id])
}

model UserFollower {
  user        User @relation("UserFollowersUser", fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  follower    User @relation("UserFollowersFollower", fields: [follower_id], references: [id], onDelete: Cascade)
  follower_id String

  @@id([user_id, follower_id])
  @@unique([user_id, follower_id])
}